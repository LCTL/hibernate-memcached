package com.googlecode.hibernate.memcached.utils;

import com.googlecode.hibernate.memcached.MemcachedRegionSettings;
import com.googlecode.hibernate.memcached.region.MemcachedRegion;
import com.googlecode.hibernate.memcached.strategy.clear.ClearStrategy;
import com.googlecode.hibernate.memcached.strategy.key.encoding.KeyEncodingStrategy;
import com.googlecode.hibernate.memcached.strategy.key.encoding.NestedKeyEncodingStrategy;
import com.googlecode.hibernate.memcached.strategy.key.encoding.ValidMemcachedKeyEncodingStrategy;

/**
 * A utility class for {@link MemcachedRegionSettings}
 * 
 * @see MemcachedRegionSettings
 */
public class MemcachedRegionSettingsUtils {

    /**
     * Gets the current clear index using the given settings 
     * {@link ClearStrategy}.
     * 
     * @param settings {@link MemcachedRegionSettings}
     * @return         the current clear index 
     */
    public static long getCurrentClearIndex(MemcachedRegionSettings settings) {
        return settings.getClearStrategy().getClearIndex();
    }

    /**
     * Creates the full dogpile token key prefix using given settings settings
     * {@link MemcachedRegionSettings#getNamespaceSeparator()}, 
     * {@link MemcachedRegionSettings#getDogpileTokenKeyPrefix()},
     * and {@link MemcachedRegionSettings#getName()}.
     * 
     * @param settings {@link MemcachedRegionSettings}
     * @return         the full dogpile token key prefix
     */
    public static String getFullDogpileTokenKeyPrefix(MemcachedRegionSettings settings) {
        return StringUtils.join(settings.getNamespaceSeparator(),
                settings.getDogpileTokenKeyPrefix(), settings.getName());
    }
    
    /**
     * Creates the full read lock key prefix using given settings settings
     * {@link MemcachedRegionSettings#getNamespaceSeparator()}, 
     * {@link MemcachedRegionSettings#getReadLockKeyPrefix()},
     * and {@link MemcachedRegionSettings#getName()}.
     * 
     * @param settings {@link MemcachedRegionSettings}
     * @return         the full read lock key prefix
     */
    public static String getFullReadLockKeyPrefix(MemcachedRegionSettings settings) {
        return StringUtils.join(settings.getNamespaceSeparator(),
                settings.getReadLockKeyPrefix(), settings.getName());
    }
    
    /**
     * Creates the full write lock key prefix using given settings settings
     * {@link MemcachedRegionSettings#getNamespaceSeparator()}, 
     * {@link MemcachedRegionSettings#getWriteLockKeyPrefix()},
     * and {@link MemcachedRegionSettings#getName()}.
     * 
     * @param settings {@link MemcachedRegionSettings}
     * @return         the full write lock key prefix
     */
    public static String getFullWriteLockKeyPrefix(MemcachedRegionSettings settings) {
        return StringUtils.join(settings.getNamespaceSeparator(),
                settings.getWriteLockKeyPrefix(), settings.getName());
    }
    
    /**
     * Creates the full clear index key prefix using given settings settings
     * {@link MemcachedRegionSettings#getNamespaceSeparator()}, 
     * {@link MemcachedRegionSettings#getClearIndexKeyPrefix()},
     * and {@link MemcachedRegionSettings#getName()}.
     * 
     * @param settings {@link MemcachedRegionSettings}
     * @return         the full clear index key prefix
     */
    public static String getFullClearIndexKeyPrefix(MemcachedRegionSettings settings) {
        return StringUtils.join(settings.getNamespaceSeparator(),
                settings.getClearIndexKeyPrefix(), settings.getName());
    }
    
    /**
     * Creates a {@link KeyEncodingStrategy} that ensures any key generated by
     * given settings settings 
     * {@link MemcachedRegionSettings#getKeyEncodingStrategy()} will produce a
     * valid Memcached key.
     * 
     * @param settings {@link MemcachedRegionSettings}
     * @return         a {@link KeyEncodingStrategy} that produces valid
     *                 Memcached keys
     */
    public static KeyEncodingStrategy getValidatedMemcachedKeyEncodingStrategy(MemcachedRegionSettings settings) {
        // Order matters here, add settings encoding first.
        NestedKeyEncodingStrategy encodingStrategy = new NestedKeyEncodingStrategy();
        encodingStrategy.addStrategy(settings.getKeyEncodingStrategy());
        encodingStrategy.addStrategy(new ValidMemcachedKeyEncodingStrategy());
        return encodingStrategy;
    }
}
